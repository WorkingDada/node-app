// PUT FUNCTION HERE
def createNamespace (namespace) {
    echo "Creating namespace ${namespace} if needed"

    sh "[ ! -z \"\$(kubectl get ns ${namespace} -o name 2>/dev/null)\" ] || kubectl create ns ${namespace}"
}

pipeline {

  // ENV
  environment {
    dockerimagename = "pttzx/nodeapp"
    dockerImage = ""
  }

  // AGENT
  agent any

  // STAGES
  stages {
    stage('Checkout Source') {
      steps {
        echo "--- Checkout Source ---"
        dir("${WORKSPACE}/app-code") {
          git branch: "main", url: "https://github.com/WorkingDada/node-app.git"
        }
      }
    }

    stage('Download Configmap'){
      steps{
        echo "--- Downloading Configmap ---"
        script {
          dir("${WORKSPACE}/app-config") {
            sh "rm -f dev.properties || true"
            git branch: "main", url: "https://github.com/WorkingDada/techx-trainee-app-config/blob/main/dev.properties"

          }
          withKubeConfig([credentialsId: 'KubeConfigCred', serverUrl: 'https://minikubeCA:58431']) {
            sh 'kubectl create configmap appconfig --from-file=${WORKSPACE}/app-config/dev.properties'
          }
        }
      }
    }

    stage('Build and Push Image') {
      environment {
        registryCredential = 'docker-credential'
      }
      steps{
        script {
          echo "--- Building Image ---"
          dockerImage = docker.build dockerimagename

          echo "--- Pushing Image ---"
          docker.withRegistry('https://registry.hub.docker.com',registryCredential) {
            dockerImage.push("1.0.0-${BUILD_NUMBER}")
          }
        }
      }
    }

    stage('Updating .yaml') {
      steps {
        script{
          echo "--- Editing Version ---"
          def fileContentsTemplate = "${WORKSPACE}/deploymentservice.yml"
          String fileContents = readFile(fileContentsTemplate)
          fileContents = fileContents.replaceAll("##VERSION##","1.0.0-${BUILD_NUMBER}")

          echo "--- Removing Old Yaml ---"
          sh "rm -f ${fileContentsTemplate}"
          writeFile file: fileContentsTemplate, text: fileContents
        }
      }
    }
    // stage('Creating namespaces') {
    //   steps {
    //     script{
    //       echo "--- Checking namespaces ---"
    //       createNamespace("techx-trainee-dev")
    //       createNamespace("techx-trainee-staging")
    //       createNamespace("techx-trainee-prod")
    //     }
    //   }
    // }

    stage('Deploying App to Kubernetes') {
      steps {
        script {
          echo "--- Deploying ---"
          kubernetesDeploy(configs: "deploymentservice.yml", kubeconfigId: "kubernetes")
        }
      }
    }
  }
}
